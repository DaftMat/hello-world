/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import blockchain.BlockChain;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author daker
 */
public class BCInterface extends javax.swing.JFrame {

    private BlockChain bc;
    /**
     * Creates new form BCInterface
     */
    public BCInterface() {
        initComponents();
        spinnerNbBlockBC.setValue((Integer)1);
        spinnerMaxTrans.setValue((Integer)1);
        spinnerDifficulty.setValue((Integer)1);
        affichageText.setEditable(false);
        radioCreateForm.setSelected(false);
        spinnerNbBlockBC.setEnabled(false);
        spinnerDifficulty.setEnabled(false);
        spinnerMaxTrans.setEnabled(false);
        nbBlockText.setEnabled(false);
        difficultyText.setEnabled(false);
        nbTransText.setEnabled(false);
        jsonFilePathCreate.setEnabled(false);
        choseFileButton.setEnabled(false);
        filePathText.setEnabled(false);
        createBCButton.setEnabled(false);
        gestionTitle.setEnabled(false);
        checkText.setEnabled(false);
        checkCheck1.setEnabled(false);
        checkCheck2.setEnabled(false);
        applyCheck.setEnabled(false);
        saveText.setEnabled(false);
        filepathTextSave.setEnabled(false);
        jsonFilePathSave.setEnabled(false);
        choseFileButtonSave.setEnabled(false);
        saveBCInJson.setEnabled(false);
        spinnerIndexBlockToPrint.setEnabled(false);
        radioAllBC.setEnabled(false);
        radioOneBlock.setEnabled(false);
        afficheBC.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        affichageText = new javax.swing.JTextArea();
        efface = new javax.swing.JButton();
        afficheBC = new javax.swing.JButton();
        radioOneBlock = new javax.swing.JRadioButton();
        jSeparator2 = new javax.swing.JSeparator();
        radioAllBC = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        spinnerIndexBlockToPrint = new javax.swing.JSpinner();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        radioCreateForm = new javax.swing.JRadioButton();
        nbBlockText = new javax.swing.JLabel();
        difficultyText = new javax.swing.JLabel();
        nbTransText = new javax.swing.JLabel();
        spinnerMaxTrans = new javax.swing.JSpinner();
        spinnerNbBlockBC = new javax.swing.JSpinner();
        spinnerDifficulty = new javax.swing.JSpinner();
        jSeparator3 = new javax.swing.JSeparator();
        radioCreateBCJson = new javax.swing.JRadioButton();
        filePathText = new javax.swing.JLabel();
        jsonFilePathCreate = new javax.swing.JTextField();
        choseFileButton = new javax.swing.JButton();
        createBCButton = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        gestionTitle = new javax.swing.JLabel();
        checkText = new javax.swing.JLabel();
        checkCheck1 = new javax.swing.JCheckBox();
        checkCheck2 = new javax.swing.JCheckBox();
        applyCheck = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        saveText = new javax.swing.JLabel();
        filepathTextSave = new javax.swing.JLabel();
        choseFileButtonSave = new javax.swing.JButton();
        jsonFilePathSave = new javax.swing.JTextField();
        saveBCInJson = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Affichage");

        affichageText.setColumns(20);
        affichageText.setRows(5);
        jScrollPane1.setViewportView(affichageText);

        efface.setText("Effacer");
        efface.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effaceActionPerformed(evt);
            }
        });

        afficheBC.setText("Afficher");
        afficheBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afficheBCActionPerformed(evt);
            }
        });

        radioOneBlock.setText("Block n°");
        radioOneBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioOneBlockActionPerformed(evt);
            }
        });

        radioAllBC.setText("Blockchain complète");
        radioAllBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioAllBCActionPerformed(evt);
            }
        });

        jLabel2.setText("Générer affichage :");

        spinnerIndexBlockToPrint.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerIndexBlockToPrintStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(efface, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(afficheBC, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(radioAllBC)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(radioOneBlock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spinnerIndexBlockToPrint))
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(efface)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(radioAllBC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioOneBlock)
                    .addComponent(spinnerIndexBlockToPrint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(afficheBC)
                .addContainerGap())
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Création");

        jLabel4.setText("Créer une Blockchain :");

        radioCreateForm.setText("Par formulaire :");
        radioCreateForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCreateFormActionPerformed(evt);
            }
        });

        nbBlockText.setText("Nombre de blocks : ");

        difficultyText.setText("Difficulté :");

        nbTransText.setText("Nombre de transactions max :");

        spinnerMaxTrans.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerMaxTransStateChanged(evt);
            }
        });

        spinnerNbBlockBC.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNbBlockBCStateChanged(evt);
            }
        });

        spinnerDifficulty.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerDifficultyStateChanged(evt);
            }
        });

        radioCreateBCJson.setText("Depuis un fichier JSon :");
        radioCreateBCJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioCreateBCJsonActionPerformed(evt);
            }
        });

        filePathText.setText("Chemin du fichier :");

        choseFileButton.setText("...");
        choseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choseFileButtonActionPerformed(evt);
            }
        });

        createBCButton.setText("Créer Blockchain");
        createBCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBCButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createBCButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioCreateForm)
                            .addComponent(jLabel4)
                            .addComponent(radioCreateBCJson)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nbBlockText)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nbTransText)
                                            .addComponent(difficultyText))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(spinnerNbBlockBC, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)
                                            .addComponent(spinnerDifficulty)
                                            .addComponent(spinnerMaxTrans)))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(filePathText)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jsonFilePathCreate)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(choseFileButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(radioCreateForm)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbBlockText)
                    .addComponent(spinnerNbBlockBC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(difficultyText)
                    .addComponent(spinnerDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbTransText)
                    .addComponent(spinnerMaxTrans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioCreateBCJson)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filePathText)
                    .addComponent(jsonFilePathCreate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choseFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createBCButton))
        );

        gestionTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gestionTitle.setText("Gestion");

        checkText.setText("Appliquer une vérification :");

        checkCheck1.setText("Nemesis");

        checkCheck2.setText("Hash");

        applyCheck.setText("Appliquer");
        applyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyCheckActionPerformed(evt);
            }
        });

        saveText.setText("Seuvegarder la Blockchain actuelle dans un fichier JSon:");

        filepathTextSave.setText("Chemin du fichier :");

        choseFileButtonSave.setText("...");
        choseFileButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choseFileButtonSaveActionPerformed(evt);
            }
        });

        saveBCInJson.setText("Sauvegarder");
        saveBCInJson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBCInJsonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator6)
                    .addComponent(gestionTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkText)
                            .addComponent(saveText))
                        .addGap(0, 154, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(filepathTextSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jsonFilePathSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(choseFileButtonSave))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(checkCheck1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(checkCheck2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(applyCheck, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveBCInJson, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(gestionTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkCheck1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkCheck2)
                    .addComponent(applyCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filepathTextSave)
                    .addComponent(jsonFilePathSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(choseFileButtonSave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveBCInJson)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void effaceActionPerformed(java.awt.event.ActionEvent evt) {                                       
        affichageText.setText("");
    }                                      

    private void radioOneBlockActionPerformed(java.awt.event.ActionEvent evt) {                                              
        if (radioAllBC.isSelected()){
            radioAllBC.setSelected(false);
        }
        radioOneBlock.setSelected(true);
        spinnerIndexBlockToPrint.setEnabled(true);
        afficheBC.setEnabled(true);
    }                                             

    private void radioCreateFormActionPerformed(java.awt.event.ActionEvent evt) {                                                
        if (radioCreateBCJson.isSelected()){
            radioCreateBCJson.setSelected(false);
            jsonFilePathCreate.setEnabled(false);
            choseFileButton.setEnabled(false);
            filePathText.setEnabled(false);
        }
        if (!createBCButton.isEnabled()){
            createBCButton.setEnabled(true);
        }
        radioCreateForm.setSelected(true);
        spinnerNbBlockBC.setEnabled(true);
        spinnerDifficulty.setEnabled(true);
        spinnerMaxTrans.setEnabled(true);
        nbBlockText.setEnabled(true);
        difficultyText.setEnabled(true);
        nbTransText.setEnabled(true);
        
    }                                               

    private void radioCreateBCJsonActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        if (radioCreateForm.isSelected()){
            radioCreateForm.setSelected(false);
            spinnerNbBlockBC.setEnabled(false);
            spinnerDifficulty.setEnabled(false);
            spinnerMaxTrans.setEnabled(false);
            nbBlockText.setEnabled(false);
            difficultyText.setEnabled(false);
            nbTransText.setEnabled(false);
        }
        if (!createBCButton.isEnabled()){
            createBCButton.setEnabled(true);
        }
        radioCreateBCJson.setSelected(true);
        jsonFilePathCreate.setEnabled(true);
        choseFileButton.setEnabled(true);
        filePathText.setEnabled(true);
    }                                                 

    private void choseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JFileChooser fc = new JFileChooser();
        int retVal = fc.showOpenDialog(jsonFilePathCreate);
        if (retVal == JFileChooser.APPROVE_OPTION){
            File saver = fc.getSelectedFile();
            String path = saver.getAbsolutePath();
            jsonFilePathCreate.setText(path);
        }else{
            jsonFilePathCreate.setText("");
        }
    }                                               

    
    private void createBCButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        if (radioCreateForm.isSelected()){
            int nbBlocks = (Integer)spinnerNbBlockBC.getValue();
            int difficulty = (Integer)spinnerDifficulty.getValue();
            int nbTransMax = (Integer)spinnerMaxTrans.getValue();
            bc = new BlockChain(difficulty, nbBlocks, nbTransMax);
            affichageText.append("BlockChain créée avec succes !\n");
        }else if (radioCreateBCJson.isSelected()){
            String jsonPath = jsonFilePathCreate.getText();
            File tester = new File(jsonPath);
            if (!tester.isAbsolute()){
                affichageText.append("Erreur chemin fichier : chemin absolu requis.\n");
                return;
            }
            if (tester.isDirectory()){
                affichageText.append("Erreur chemin fichier : ceci est un répertoire.\n");
                return;
            }
            if (!tester.exists()){
                affichageText.append("Erreur fichier : le fichier n'existe pas.\n");
                return;
            }
            if (tester.isFile() && !tester.canRead()){
                affichageText.append("Erreur fichier : ne peut être lu.\n");
                return;
            }
            if (tester.isFile() && !jsonPath.endsWith(".json")){
                affichageText.append("Erreur fichier : doit être un .json.\n");
                return;
            }
            bc = new BlockChain(jsonPath);
            affichageText.append("BlockChain créée avec succes !\n");
            jsonFilePathSave.setText("");
        }
        
        spinnerNbBlockBC.setValue((Integer)1);
        spinnerMaxTrans.setValue((Integer)1);
        spinnerDifficulty.setValue((Integer)1);
        jsonFilePathCreate.setText("");
        radioCreateForm.setSelected(false);
        radioCreateBCJson.setSelected(false);
        spinnerNbBlockBC.setEnabled(false);
        spinnerDifficulty.setEnabled(false);
        spinnerMaxTrans.setEnabled(false);
        nbBlockText.setEnabled(false);
        difficultyText.setEnabled(false);
        nbTransText.setEnabled(false);
        jsonFilePathCreate.setEnabled(false);
        choseFileButton.setEnabled(false);
        filePathText.setEnabled(false);
        createBCButton.setEnabled(false);
        radioAllBC.setEnabled(true);
        radioOneBlock.setEnabled(true);
        gestionTitle.setEnabled(true);
        checkText.setEnabled(true);
        checkCheck1.setEnabled(true);
        checkCheck2.setEnabled(true);
        applyCheck.setEnabled(true);
        saveText.setEnabled(true);
        filepathTextSave.setEnabled(true);
        jsonFilePathSave.setEnabled(true);
        choseFileButtonSave.setEnabled(true);
        saveBCInJson.setEnabled(true);
        
        
    }                                              

    private void radioAllBCActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (radioOneBlock.isSelected()){
            radioOneBlock.setSelected(false);
            spinnerIndexBlockToPrint.setEnabled(false);
        }
        radioAllBC.setSelected(true);
        afficheBC.setEnabled(true);
    }                                          

    private void afficheBCActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (radioAllBC.isSelected()){
            affichageText.append(bc.toString());
        }else if (radioOneBlock.isSelected()){
            int indexBlock = (Integer)spinnerIndexBlockToPrint.getValue();
            affichageText.append(bc.getBlock(indexBlock).toString());
        }
        radioAllBC.setSelected(false);
        radioOneBlock.setSelected(false);
        spinnerIndexBlockToPrint.setEnabled(false);
        afficheBC.setEnabled(false);
    }                                         

    private void spinnerNbBlockBCStateChanged(javax.swing.event.ChangeEvent evt) {                                              
        int value = (Integer)spinnerNbBlockBC.getValue();
        if (value < 1){
            spinnerNbBlockBC.setValue((Integer)1);
        }
        if (value > 10){
            spinnerNbBlockBC.setValue((Integer)10);
        }
    }                                             

    private void spinnerDifficultyStateChanged(javax.swing.event.ChangeEvent evt) {                                               
        int value = (Integer)spinnerDifficulty.getValue();
        if (value < 1){
            spinnerDifficulty.setValue((Integer)1);
        }
        if (value > 4){
            spinnerDifficulty.setValue((Integer)4);
        }
    }                                              

    private void spinnerMaxTransStateChanged(javax.swing.event.ChangeEvent evt) {                                             
        int value = (Integer)spinnerMaxTrans.getValue();
        if (value < 1){
            spinnerMaxTrans.setValue((Integer)1);
        }
        if (value > 10){
            spinnerMaxTrans.setValue((Integer)10);
        }
    }                                            

    private void spinnerIndexBlockToPrintStateChanged(javax.swing.event.ChangeEvent evt) {                                                      
        int value = (Integer)spinnerIndexBlockToPrint.getValue();
        if (value < 1){
            spinnerIndexBlockToPrint.setValue((Integer)1);
        }
        if (value > (Integer)bc.getNbBlocks()+1){
            spinnerIndexBlockToPrint.setValue((Integer)bc.getNbBlocks());
        }
    }                                                     

    private void applyCheckActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (checkCheck1.isSelected()){
            if (bc.checkGenesis()){
                affichageText.append("Le Genesis de votre Blockchain est sécurisé.\n");
            }else{
                affichageText.append("Le Genesis de votre Blockchain n'est pas sécurisé.\n");
            }
        }
        if (checkCheck2.isSelected()){
            if (bc.checkHash()){
                affichageText.append("Les hash de vos blocks sont sécurisés.\n");
            }else{
                affichageText.append("Les hash de vos blocks ne sont pas sécurisés.\n");
            }
        }
        checkCheck1.setSelected(false);
        checkCheck2.setSelected(false);
    }                                          

    private void saveBCInJsonActionPerformed(java.awt.event.ActionEvent evt) {                                             
            String jsonPath = jsonFilePathSave.getText();
            File tester = new File(jsonPath);
            if (!tester.isAbsolute()){
                affichageText.append("Erreur chemin fichier : chemin absolu requis.\n");
                return;
            }
            if (!tester.exists()){
                if (!jsonPath.endsWith(".json")){
                    affichageText.append("Erreur fichier : doit être un .json.\n");
                    return;
                }
                try {
                    tester.createNewFile();
                } catch (IOException ex) {
                    affichageText.append("Erreur chemin fichier : le fichier n'a pu être créé.\n");
                }
                return;
            }
            if (tester.isDirectory()){
                affichageText.append("Erreur chemin fichier : ceci est un répertoire.\n");
                return;
            }
            if (tester.isFile() && !tester.canWrite()){
                affichageText.append("Erreur fichier : ne peut être modifié.\n");
                return;
            }
            if (tester.isFile() && !jsonPath.endsWith(".json")){
                affichageText.append("Erreur fichier : doit être un .json.\n");
                return;
            }
            bc.jsonWrite(jsonPath);
            affichageText.append("BlockChain sauvegardée avec succes !\n");
            jsonFilePathSave.setText("");
    }                                            

    private void choseFileButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        JFileChooser fc = new JFileChooser();
        int retVal = fc.showSaveDialog(jsonFilePathSave);
        if (retVal == JFileChooser.APPROVE_OPTION){
            File saver = fc.getSelectedFile();
            String path = saver.getAbsolutePath();
            jsonFilePathSave.setText(path);
        }else{
            jsonFilePathSave.setText("");
        }
    }                                                   

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BCInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BCInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BCInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BCInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BCInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextArea affichageText;
    private javax.swing.JButton afficheBC;
    private javax.swing.JButton applyCheck;
    private javax.swing.JCheckBox checkCheck1;
    private javax.swing.JCheckBox checkCheck2;
    private javax.swing.JLabel checkText;
    private javax.swing.JButton choseFileButton;
    private javax.swing.JButton choseFileButtonSave;
    private javax.swing.JToggleButton createBCButton;
    private javax.swing.JLabel difficultyText;
    private javax.swing.JButton efface;
    private javax.swing.JLabel filePathText;
    private javax.swing.JLabel filepathTextSave;
    private javax.swing.JLabel gestionTitle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTextField jsonFilePathCreate;
    private javax.swing.JTextField jsonFilePathSave;
    private javax.swing.JLabel nbBlockText;
    private javax.swing.JLabel nbTransText;
    private javax.swing.JRadioButton radioAllBC;
    private javax.swing.JRadioButton radioCreateBCJson;
    private javax.swing.JRadioButton radioCreateForm;
    private javax.swing.JRadioButton radioOneBlock;
    private javax.swing.JButton saveBCInJson;
    private javax.swing.JLabel saveText;
    private javax.swing.JSpinner spinnerDifficulty;
    private javax.swing.JSpinner spinnerIndexBlockToPrint;
    private javax.swing.JSpinner spinnerMaxTrans;
    private javax.swing.JSpinner spinnerNbBlockBC;
    // End of variables declaration                   
}